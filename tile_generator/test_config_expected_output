{'verbose': False, 'metadata_version': 1.8, 'icon_file': 'resources/icon.png', 'all_properties': [{'name': 'author', 'default': 'Tile Ninja', 'optional': False, 'configurable': False, 'label': 'Author', 'type': 'string'}, {'type': 'string', 'configurable': True, 'optional': True, 'name': 'customer_name', 'label': 'Full Name'}, {'description': 'Address to use for junk mail', 'optional': False, 'configurable': True, 'label': 'Street Address', 'type': 'string', 'name': 'street_address'}, {'optional': False, 'configurable': True, 'type': 'string', 'name': 'city', 'label': 'City'}, {'name': 'zip_code', 'default': '90310', 'type': 'string', 'configurable': True, 'label': 'ZIP+4', 'optional': False}, {'name': 'country', 'type': 'dropdown_select', 'configurable': True, 'label': 'Country', 'optional': False, 'options': [{'default': True, 'name': 'country_us', 'label': 'US'}, {'name': 'country_elsewhere', 'label': 'Elsewhere'}]}, {'name': 'example_collection', 'default': [{'album': 'Christmas Carols', 'explicit': True, 'artist': 'Ops Manatee'}], 'optional': False, 'property_blueprints': [{'type': 'string', 'name': 'album', 'label': 'Album'}, {'type': 'string', 'name': 'artist', 'label': 'Artist'}, {'type': 'boolean', 'name': 'explicit', 'label': 'Explicit'}], 'label': 'Albums', 'type': 'collection', 'configurable': True}, {'name': 'example_selector', 'option_templates': [{'select_value': 'Pizza', 'name': 'pizza_option', 'property_blueprints': [{'label': 'Pepperoni', 'type': 'boolean', 'name': 'pepperoni', 'configurable': True}, {'label': 'Pineapple', 'type': 'boolean', 'name': 'pineapple', 'configurable': True}, {'type': 'string', 'label': 'Other Toppings', 'optional': True, 'name': 'other_toppings', 'configurable': True}]}, {'select_value': 'Filet Mignon', 'name': 'filet_mignon_option', 'property_blueprints': [{'label': 'Complex type inside selector', 'type': 'simple_credentials', 'name': 'steak_creds', 'configurable': True}, {'name': 'rarity_dropdown', 'default': 'rare', 'label': 'How rare?', 'type': 'dropdown_select', 'options': [{'name': 'rare', 'label': 'Rare'}, {'name': 'medium', 'label': 'Medium'}, {'name': 'well-done', 'label': 'Well done'}], 'configurable': True}]}], 'default': 'Pizza', 'optional': False, 'label': 'Food Choices', 'type': 'selector', 'configurable': True}, {'description': 'Example of simple credentials type', 'type': 'simple_credentials', 'configurable': True, 'label': 'Simple Credentials', 'optional': False, 'name': 'my_creds'}, {'name': 'username', 'type': 'string', 'configurable': True, 'label': 'Username', 'optional': False, 'constraints': [{'must_match_regex': '^[^!@#$%^&*()]*$', 'error_message': 'This name cannot contain capital digits.'}]}, {'optional': False, 'configurable': True, 'type': 'secret', 'name': 'password', 'label': 'Password'}, {'description': 'Maximum amount of time to allow canaries to take before going healthy', 'type': 'integer', 'configurable': True, 'label': 'Canary Watch Timeout', 'optional': False, 'name': 'canary_watch_timeout'}, {'description': 'Maximum amount of time to allow non-canaries to take before going healthy', 'type': 'integer', 'configurable': True, 'label': 'Update Watch Timeout', 'optional': False, 'name': 'update_watch_timeout'}, {'description': 'Choose whether or not to enable this feature.', 'default': 'feature_disabled', 'type': 'selector', 'configurable': True, 'option_templates': [{'select_value': 'feature_enabled', 'label': 'Enable feature', 'property_blueprints': [{'label': 'Configure this feature', 'type': 'string', 'name': 'feature_config', 'configurable': True}], 'name': 'feature_enabled', 'description': 'Enable this feature (requires more config).'}, {'select_value': 'feature_disabled', 'label': 'Disable feature', 'description': 'Disable this feature (no more config).', 'name': 'feature_disabled'}], 'label': 'Enable this feature?', 'optional': False, 'name': 'is_feature_enabled'}, {'name': 'planets', 'optional': True, 'label': 'Planets', 'type': 'multi_select_options', 'options': [{'name': 'mercury', 'label': 'mercury'}, {'name': 'Venus', 'label': 'venus'}, {'name': 'Earth', 'label': 'earth'}, {'name': 'Mars', 'label': 'mars'}, {'name': 'Jupiter', 'label': 'jupiter'}, {'name': 'Saturn', 'label': 'saturn'}, {'name': 'Uranus', 'label': 'uranus'}, {'name': 'Neptune', 'label': 'neptune'}], 'configurable': True}, {'name': 'app_instances', 'default': 2, 'type': 'integer', 'configurable': True, 'label': 'Dynamic app instance count', 'optional': False}, {'name': 'auto_service_name', 'default': 'tg-test-broker1-service', 'type': 'string', 'configurable': True, 'label': 'Auto services service name', 'optional': False}], 'compilation_vm_disk_size': 10240, 'space': 'test-tile-space', 'label': 'Generated Test Tile', 'forms': [{'label': 'Contact Info', 'description': 'Examples of basic property types', 'name': 'contact_form', 'properties': [{'type': 'string', 'configurable': True, 'optional': True, 'name': 'customer_name', 'label': 'Full Name'}, {'description': 'Address to use for junk mail', 'optional': False, 'configurable': True, 'label': 'Street Address', 'type': 'string', 'name': 'street_address'}, {'optional': False, 'configurable': True, 'type': 'string', 'name': 'city', 'label': 'City'}, {'name': 'zip_code', 'default': '90310', 'type': 'string', 'configurable': True, 'label': 'ZIP+4', 'optional': False}, {'name': 'country', 'type': 'dropdown_select', 'configurable': True, 'label': 'Country', 'optional': False, 'options': [{'default': True, 'name': 'country_us', 'label': 'US'}, {'name': 'country_elsewhere', 'label': 'Elsewhere'}]}]}, {'label': 'Albums', 'description': 'Example of collection property type', 'name': 'albums_form', 'properties': [{'name': 'example_collection', 'default': [{'album': 'Christmas Carols', 'explicit': True, 'artist': 'Ops Manatee'}], 'optional': False, 'property_blueprints': [{'type': 'string', 'name': 'album', 'label': 'Album'}, {'type': 'string', 'name': 'artist', 'label': 'Artist'}, {'type': 'boolean', 'name': 'explicit', 'label': 'Explicit'}], 'label': 'Albums', 'type': 'collection', 'configurable': True}]}, {'label': 'Food Order', 'description': 'Example of selector property type', 'name': 'food_form', 'properties': [{'name': 'example_selector', 'option_templates': [{'select_value': 'Pizza', 'name': 'pizza_option', 'property_blueprints': [{'label': 'Pepperoni', 'type': 'boolean', 'name': 'pepperoni', 'configurable': True}, {'label': 'Pineapple', 'type': 'boolean', 'name': 'pineapple', 'configurable': True}, {'type': 'string', 'label': 'Other Toppings', 'optional': True, 'name': 'other_toppings', 'configurable': True}]}, {'select_value': 'Filet Mignon', 'name': 'filet_mignon_option', 'property_blueprints': [{'label': 'Complex type inside selector', 'type': 'simple_credentials', 'name': 'steak_creds', 'configurable': True}, {'name': 'rarity_dropdown', 'default': 'rare', 'label': 'How rare?', 'type': 'dropdown_select', 'options': [{'name': 'rare', 'label': 'Rare'}, {'name': 'medium', 'label': 'Medium'}, {'name': 'well-done', 'label': 'Well done'}], 'configurable': True}]}], 'default': 'Pizza', 'optional': False, 'label': 'Food Choices', 'type': 'selector', 'configurable': True}]}, {'label': 'Credentials', 'description': 'Examples of secret property types', 'name': 'credentials_form', 'properties': [{'description': 'Example of simple credentials type', 'type': 'simple_credentials', 'configurable': True, 'label': 'Simple Credentials', 'optional': False, 'name': 'my_creds'}, {'name': 'username', 'type': 'string', 'configurable': True, 'label': 'Username', 'optional': False, 'constraints': [{'must_match_regex': '^[^!@#$%^&*()]*$', 'error_message': 'This name cannot contain capital digits.'}]}, {'optional': False, 'configurable': True, 'type': 'secret', 'name': 'password', 'label': 'Password'}]}, {'label': 'Update Settings', 'description': 'Example of user-configured update Settings', 'name': 'update_form', 'properties': [{'description': 'Maximum amount of time to allow canaries to take before going healthy', 'type': 'integer', 'configurable': True, 'label': 'Canary Watch Timeout', 'optional': False, 'name': 'canary_watch_timeout'}, {'description': 'Maximum amount of time to allow non-canaries to take before going healthy', 'type': 'integer', 'configurable': True, 'label': 'Update Watch Timeout', 'optional': False, 'name': 'update_watch_timeout'}]}, {'label': 'Selector without subproperties', 'description': 'Configure this feature.', 'name': 'selector_without_subproperties', 'properties': [{'description': 'Choose whether or not to enable this feature.', 'default': 'feature_disabled', 'type': 'selector', 'configurable': True, 'option_templates': [{'select_value': 'feature_enabled', 'label': 'Enable feature', 'property_blueprints': [{'label': 'Configure this feature', 'type': 'string', 'name': 'feature_config', 'configurable': True}], 'name': 'feature_enabled', 'description': 'Enable this feature (requires more config).'}, {'select_value': 'feature_disabled', 'label': 'Disable feature', 'description': 'Disable this feature (no more config).', 'name': 'feature_disabled'}], 'label': 'Enable this feature?', 'optional': False, 'name': 'is_feature_enabled'}]}, {'label': 'Multi-Select Example', 'properties': [{'name': 'planets', 'optional': True, 'label': 'Planets', 'type': 'multi_select_options', 'options': [{'name': 'mercury', 'label': 'mercury'}, {'name': 'Venus', 'label': 'venus'}, {'name': 'Earth', 'label': 'earth'}, {'name': 'Mars', 'label': 'mars'}, {'name': 'Jupiter', 'label': 'jupiter'}, {'name': 'Saturn', 'label': 'saturn'}, {'name': 'Uranus', 'label': 'uranus'}, {'name': 'Neptune', 'label': 'neptune'}], 'configurable': True}], 'name': 'planets_form'}, {'label': 'App manifest config', 'properties': [{'name': 'app_instances', 'default': 2, 'type': 'integer', 'configurable': True, 'label': 'Dynamic app instance count', 'optional': False}], 'name': 'app_manifest_form'}, {'label': 'Auto services config', 'properties': [{'name': 'auto_service_name', 'default': 'tg-test-broker1-service', 'type': 'string', 'configurable': True, 'label': 'Auto services service name', 'optional': False}], 'name': 'auto_services_form'}], 'version': '0.0.1', 'service_plan_forms': [{'variable_name': 'CUSTOM_DYNAMIC_SERVICE_PLAN_1', 'label': 'Custom Dynamic Service Plan 1', 'description': 'Custom Dynamic service plan 1 for Test Tile', 'name': 'custom_dynamic_service_plan_1', 'properties': [{'configurable': True, 'type': 'string', 'description': 'The description of this plan', 'name': 'description1'}, {'configurable': True, 'type': 'string', 'description': 'The license key for this plan', 'name': 'license_key1'}, {'description': 'The number of available seats for this license', 'default': 1, 'configurable': True, 'type': 'integer', 'constraints': {'max': 500, 'min': 1}, 'name': 'num_seats1'}]}, {'variable_name': 'CUSTOM_DYNAMIC_SERVICE_PLAN_2', 'label': 'Custom Dynamic Service Plan 2', 'description': 'Custom Dynamic service plan 2 for Test Tile', 'name': 'custom_dynamic_service_plan_2', 'properties': [{'configurable': True, 'type': 'string', 'description': 'The description of this plan', 'name': 'description2'}, {'configurable': True, 'type': 'string', 'description': 'The api key for this plan', 'name': 'api_key2'}, {'default': 1, 'configurable': True, 'type': 'integer', 'description': 'The number of licenses', 'name': 'num_of_license2'}]}], 'description': 'A sample tile generated by tile-generator', 'releases': [{'is_cf': True, 'jobs': [{'name': 'docker-bosh-tg_test_app4', 'package': {'files': [{'path': 'docker:guidowb/sample-cf-app', 'name': 'guidowb-sample-cf-app.tgz'}], 'ephemeral_disk': 4096, 'properties': {'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}}, 'name': 'tg_test_app4', 'docker_images': ['guidowb/sample-cf-app'], 'is_docker_bosh': True, 'manifest': {'containers': [{'bind_ports': ['80:80', '443:443', '8080:8080', '8443:8443'], 'image': 'guidowb/sample-cf-app', 'env_file': ['/var/vcap/jobs/docker-bosh-tg_test_app4/bin/opsmgr.env'], 'name': 'app'}]}, 'instances': 1, 'is_docker': True, 'persistent_disk': 2048, 'memory': 512, 'routes': [{'prefix': 'my-route', 'port': 8080}], 'type': 'docker-bosh', 'cpu': 2, 'requires_docker_bosh': True}, 'manifest': {'username': '(( .properties.username.value ))', 'domain': '(( ..cf.cloud_controller.system_domain.value ))', 'tg_test_app5': {'name': 'tg_test_app5'}, 'tg_test_app2': {'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'name': 'tg_test_app2', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}}, 'tg_test_app3': {'auto_services': [{'plan': 'second-plan', 'name': 'tg-test-broker1-service', 'service_instance': 'tg-test-svc'}], 'name': 'tg_test_app3', 'app_manifest': {'memory': '256M'}}, 'example_selector': {'selected_option': '(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.example_selector.value ))'}, 'tg_test_app1': {'auto_services': [], 'name': 'tg_test_app1', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))', 'memory': '256M'}}, 'my_creds': {'password': '(( .properties.my_creds.password ))', 'identity': '(( .properties.my_creds.identity ))'}, 'auto_service_name': '(( .properties.auto_service_name.value ))', 'tg_test_app1_auto_zip': {'auto_services': [], 'name': 'tg_test_app1_auto_zip', 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'update_watch_timeout': '(( .properties.update_watch_timeout.value ))', 'cf': {'admin_user': '(( ..cf.uaa.system_services_credentials.identity ))', 'admin_password': '(( ..cf.uaa.system_services_credentials.password ))'}, 'apply_open_security_group': '(( .properties.apply_open_security_group.value ))', 'ssl': {'skip_cert_verify': '(( ..cf.ha_proxy.skip_cert_verify.value ))'}, 'planets': '(( .properties.planets.value ))', 'app_instances': '(( .properties.app_instances.value ))', 'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}, 'org': '(( .properties.org.value ))', 'password': '(( .properties.password.value ))', 'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}, 'customer_name': '(( .properties.customer_name.value ))', 'app_domains': ['(( ..cf.cloud_controller.apps_domain.value ))'], 'city': '(( .properties.city.value ))', 'tg_test_binary_app': {'auto_services': [], 'name': 'tg_test_binary_app', 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}}, 'space': '(( .properties.space.value ))', 'country': '(( .properties.country.value ))', 'custom_dynamic_service_plan_1': '(( .properties.custom_dynamic_service_plan_1.value ))', 'author': '(( .properties.author.value ))', 'canary_watch_timeout': '(( .properties.canary_watch_timeout.value ))', 'allow_paid_service_plans': '(( .properties.allow_paid_service_plans.value ))', 'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}, 'is_feature_enabled': {'selected_option': '(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.is_feature_enabled.value ))'}, 'tg_test_broker1': {'auto_services': [], 'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'custom_dynamic_service_plan_2': '(( .properties.custom_dynamic_service_plan_2.value ))', 'example_collection': '(( .properties.example_collection.value ))', 'tg_test_broker2': {'auto_services': [], 'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'street_address': '(( .properties.street_address.value ))', 'zip_code': '(( .properties.zip_code.value ))'}, 'template': 'docker-bosh', 'type': 'docker-bosh-tg_test_app4', 'properties': {}}, {'name': 'deploy-all', 'post_deploy': True, 'lifecycle': 'errand', 'template': 'deploy-all', 'manifest': {'username': '(( .properties.username.value ))', 'domain': '(( ..cf.cloud_controller.system_domain.value ))', 'tg_test_app5': {'name': 'tg_test_app5'}, 'tg_test_app2': {'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'name': 'tg_test_app2', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}}, 'tg_test_app3': {'auto_services': [{'plan': 'second-plan', 'name': 'tg-test-broker1-service', 'service_instance': 'tg-test-svc'}], 'name': 'tg_test_app3', 'app_manifest': {'memory': '256M'}}, 'example_selector': {'selected_option': '(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.example_selector.value ))'}, 'tg_test_app1': {'auto_services': [], 'name': 'tg_test_app1', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))', 'memory': '256M'}}, 'my_creds': {'password': '(( .properties.my_creds.password ))', 'identity': '(( .properties.my_creds.identity ))'}, 'auto_service_name': '(( .properties.auto_service_name.value ))', 'tg_test_app1_auto_zip': {'auto_services': [], 'name': 'tg_test_app1_auto_zip', 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'update_watch_timeout': '(( .properties.update_watch_timeout.value ))', 'cf': {'admin_user': '(( ..cf.uaa.system_services_credentials.identity ))', 'admin_password': '(( ..cf.uaa.system_services_credentials.password ))'}, 'apply_open_security_group': '(( .properties.apply_open_security_group.value ))', 'ssl': {'skip_cert_verify': '(( ..cf.ha_proxy.skip_cert_verify.value ))'}, 'planets': '(( .properties.planets.value ))', 'app_instances': '(( .properties.app_instances.value ))', 'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}, 'org': '(( .properties.org.value ))', 'password': '(( .properties.password.value ))', 'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}, 'customer_name': '(( .properties.customer_name.value ))', 'app_domains': ['(( ..cf.cloud_controller.apps_domain.value ))'], 'city': '(( .properties.city.value ))', 'tg_test_binary_app': {'auto_services': [], 'name': 'tg_test_binary_app', 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}}, 'space': '(( .properties.space.value ))', 'country': '(( .properties.country.value ))', 'custom_dynamic_service_plan_1': '(( .properties.custom_dynamic_service_plan_1.value ))', 'author': '(( .properties.author.value ))', 'canary_watch_timeout': '(( .properties.canary_watch_timeout.value ))', 'allow_paid_service_plans': '(( .properties.allow_paid_service_plans.value ))', 'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}, 'is_feature_enabled': {'selected_option': '(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.is_feature_enabled.value ))'}, 'tg_test_broker1': {'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'user': '(( .deploy-all.app_credentials.identity ))', 'password': '(( .deploy-all.app_credentials.password ))', 'auto_services': []}, 'custom_dynamic_service_plan_2': '(( .properties.custom_dynamic_service_plan_2.value ))', 'security': {'password': '(( .deploy-all.app_credentials.password ))', 'user': '(( .deploy-all.app_credentials.identity ))'}, 'example_collection': '(( .properties.example_collection.value ))', 'tg_test_broker2': {'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'user': '(( .deploy-all.app_credentials.identity ))', 'password': '(( .deploy-all.app_credentials.password ))', 'auto_services': []}, 'street_address': '(( .properties.street_address.value ))', 'zip_code': '(( .properties.zip_code.value ))'}, 'type': 'deploy-all', 'properties': {}}, {'pre_delete': True, 'lifecycle': 'errand', 'template': 'delete-all', 'manifest': {'username': '(( .properties.username.value ))', 'domain': '(( ..cf.cloud_controller.system_domain.value ))', 'tg_test_app5': {'name': 'tg_test_app5'}, 'tg_test_app2': {'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'name': 'tg_test_app2', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}}, 'tg_test_app3': {'auto_services': [{'plan': 'second-plan', 'name': 'tg-test-broker1-service', 'service_instance': 'tg-test-svc'}], 'name': 'tg_test_app3', 'app_manifest': {'memory': '256M'}}, 'example_selector': {'selected_option': '(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.example_selector.value ))'}, 'tg_test_app1': {'auto_services': [], 'name': 'tg_test_app1', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))', 'memory': '256M'}}, 'my_creds': {'password': '(( .properties.my_creds.password ))', 'identity': '(( .properties.my_creds.identity ))'}, 'auto_service_name': '(( .properties.auto_service_name.value ))', 'tg_test_app1_auto_zip': {'auto_services': [], 'name': 'tg_test_app1_auto_zip', 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'update_watch_timeout': '(( .properties.update_watch_timeout.value ))', 'cf': {'admin_user': '(( ..cf.uaa.system_services_credentials.identity ))', 'admin_password': '(( ..cf.uaa.system_services_credentials.password ))'}, 'apply_open_security_group': '(( .properties.apply_open_security_group.value ))', 'ssl': {'skip_cert_verify': '(( ..cf.ha_proxy.skip_cert_verify.value ))'}, 'planets': '(( .properties.planets.value ))', 'app_instances': '(( .properties.app_instances.value ))', 'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}, 'org': '(( .properties.org.value ))', 'password': '(( .properties.password.value ))', 'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}, 'customer_name': '(( .properties.customer_name.value ))', 'app_domains': ['(( ..cf.cloud_controller.apps_domain.value ))'], 'city': '(( .properties.city.value ))', 'tg_test_binary_app': {'auto_services': [], 'name': 'tg_test_binary_app', 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}}, 'space': '(( .properties.space.value ))', 'country': '(( .properties.country.value ))', 'custom_dynamic_service_plan_1': '(( .properties.custom_dynamic_service_plan_1.value ))', 'author': '(( .properties.author.value ))', 'canary_watch_timeout': '(( .properties.canary_watch_timeout.value ))', 'allow_paid_service_plans': '(( .properties.allow_paid_service_plans.value ))', 'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}, 'is_feature_enabled': {'selected_option': '(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.is_feature_enabled.value ))'}, 'tg_test_broker1': {'auto_services': [], 'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'custom_dynamic_service_plan_2': '(( .properties.custom_dynamic_service_plan_2.value ))', 'example_collection': '(( .properties.example_collection.value ))', 'tg_test_broker2': {'auto_services': [], 'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'street_address': '(( .properties.street_address.value ))', 'zip_code': '(( .properties.zip_code.value ))'}, 'type': 'delete-all', 'properties': {}, 'name': 'delete-all'}], 'name': 'test-tile', 'consumes_cross_deployment': {'nats': {'from': 'nats', 'deployment': '(( ..cf.deployment_name ))'}}, 'requires_docker_bosh': True, 'requires_meta_buildpack': True, 'packages': [{'files': [{'path': 'resources/app.zip', 'name': 'app.zip'}], 'is_cf': True, 'name': 'tg_test_app1', 'type': 'app', 'manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'memory': '256M', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))'}, 'is_app': True, 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'memory': '256M', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))'}, 'requires_cf_cli': True, 'properties': {'tg_test_app1': {'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'memory': '256M', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))'}, 'name': 'tg_test_app1', 'auto_services': []}}}, {'files': [{'path': 'src/app', 'name': 'app'}], 'is_cf': True, 'name': 'tg_test_app1_auto_zip', 'type': 'app', 'manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'is_app': True, 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'requires_cf_cli': True, 'properties': {'tg_test_app1_auto_zip': {'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'name': 'tg_test_app1_auto_zip', 'auto_services': []}}}, {'files': [{'path': 'src/binary-app/binary-app.py', 'name': 'binary-app.py'}], 'is_cf': True, 'name': 'tg_test_binary_app', 'type': 'app', 'manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}, 'is_app': True, 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}, 'requires_cf_cli': True, 'properties': {'tg_test_binary_app': {'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}, 'name': 'tg_test_binary_app', 'auto_services': []}}}, {'files': [{'path': 'resources/app.zip', 'name': 'app.zip'}], 'is_cf': True, 'name': 'tg_test_broker1', 'enable_global_access_to_plans': True, 'type': 'app-broker', 'is_broker_app': True, 'manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'is_app': True, 'is_broker': True, 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'requires_cf_cli': True, 'properties': {'tg_test_broker1': {'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'auto_services': []}}}, {'files': [{'path': 'resources/app.zip', 'name': 'app.zip'}], 'is_cf': True, 'needs_cf_credentials': True, 'health_check': 'none', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}, 'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'properties': {'tg_test_app2': {'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}, 'name': 'tg_test_app2', 'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}]}}, 'name': 'tg_test_app2', 'type': 'app', 'manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}, 'is_app': True, 'requires_cf_cli': True, 'consumes': {'nats': {'from': 'nats', 'deployment': '(( ..cf.deployment_name ))'}, 'redis': {'from': 'redis'}}}, {'files': [{'path': 'resources/app.zip', 'name': 'app.zip'}], 'is_cf': True, 'properties': {'tg_test_broker2': {'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'auto_services': []}}, 'internal_service_names': ['service1', 'service2'], 'name': 'tg_test_broker2', 'requires_cf_cli': True, 'is_broker_app': True, 'manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'is_app': True, 'is_broker': True, 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'type': 'app-broker', 'consumes': {'nats': {'from': 'nats', 'deployment': '(( ..cf.deployment_name ))'}, 'redis': {'from': 'redis'}}}, {'files': [{'path': 'resources/buildpack.zip', 'name': 'buildpack.zip'}], 'is_cf': True, 'name': 'tg_test_buildpack', 'requires_cf_cli': True, 'is_buildpack': True, 'path': 'buildpack.zip', 'buildpack_order': 99, 'type': 'buildpack', 'properties': {'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}}}, {'files': [{'path': 'resources/decorator.zip', 'name': 'decorator.zip'}], 'is_cf': True, 'name': 'tg_test_decorator', 'type': 'decorator', 'is_decorator': True, 'is_buildpack': True, 'requires_meta_buildpack': True, 'path': 'decorator.zip', 'requires_cf_cli': True, 'properties': {'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}}}, {'files': [], 'is_cf': True, 'name': 'tg_test_app3', 'requires_cf_cli': True, 'image': 'guidowb/sample-cf-app', 'is_docker_app': True, 'manifest': {'memory': '256M'}, 'is_app': True, 'auto_services': [{'plan': 'second-plan', 'service_instance': 'tg-test-svc', 'name': 'tg-test-broker1-service'}], 'is_docker': True, 'app_manifest': {'memory': '256M'}, 'type': 'docker-app', 'properties': {'tg_test_app3': {'app_manifest': {'memory': '256M'}, 'name': 'tg_test_app3', 'auto_services': [{'plan': 'second-plan', 'service_instance': 'tg-test-svc', 'name': 'tg-test-broker1-service'}]}}}, {'files': [{'path': 'docker:guidowb/sample-cf-app', 'name': 'guidowb-sample-cf-app.tgz'}], 'ephemeral_disk': 4096, 'properties': {'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}}, 'name': 'tg_test_app4', 'docker_images': ['guidowb/sample-cf-app'], 'is_docker_bosh': True, 'manifest': {'containers': [{'bind_ports': ['80:80', '443:443', '8080:8080', '8443:8443'], 'image': 'guidowb/sample-cf-app', 'env_file': ['/var/vcap/jobs/docker-bosh-tg_test_app4/bin/opsmgr.env'], 'name': 'app'}]}, 'instances': 1, 'is_docker': True, 'persistent_disk': 2048, 'memory': 512, 'routes': [{'prefix': 'my-route', 'port': 8080}], 'type': 'docker-bosh', 'cpu': 2, 'requires_docker_bosh': True}, {'files': [{'path': '/home/user/workspace/tile-generator/tile_generator/templates/src/common/utils.sh', 'name': 'utils.sh'}], 'dir': 'src', 'name': 'common', 'template': 'common'}, {'files': [{'path': 'http://cli.run.pivotal.io/stable?release=linux64-binary&source=github-rel', 'name': 'cf-linux-amd64.tgz'}, {'path': '/home/user/workspace/tile-generator/tile_generator/templates/src/templates/all_open.json', 'name': 'all_open.json'}], 'dir': 'blobs', 'name': 'cf_cli', 'template': 'cf_cli'}], 'requires_cf_cli': True, 'consumes': {'nats': {'from': 'nats', 'deployment': '(( ..cf.deployment_name ))'}, 'redis': {'from': 'redis'}}}, {'jobs': [{'templates': [{'release': 'redis', 'name': 'redis'}], 'ephemeral_disk': 4096, 'dynamic_ip': 1, 'name': 'redis', 'is_static': False, 'varname': 'redis', 'cpu': 2, 'static_ip': 0, 'instances': 2, 'max_in_flight': 1, 'manifest': {'username': '(( .properties.username.value ))', 'domain': '(( ..cf.cloud_controller.system_domain.value ))', 'tg_test_app5': {'name': 'tg_test_app5'}, 'tg_test_app2': {'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'name': 'tg_test_app2', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}}, 'tg_test_app3': {'auto_services': [{'plan': 'second-plan', 'name': 'tg-test-broker1-service', 'service_instance': 'tg-test-svc'}], 'name': 'tg_test_app3', 'app_manifest': {'memory': '256M'}}, 'example_selector': {'selected_option': '(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.example_selector.value ))'}, 'tg_test_app1': {'auto_services': [], 'name': 'tg_test_app1', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))', 'memory': '256M'}}, 'my_creds': {'password': '(( .properties.my_creds.password ))', 'identity': '(( .properties.my_creds.identity ))'}, 'auto_service_name': '(( .properties.auto_service_name.value ))', 'tg_test_app1_auto_zip': {'auto_services': [], 'name': 'tg_test_app1_auto_zip', 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'update_watch_timeout': '(( .properties.update_watch_timeout.value ))', 'cf': {'admin_user': '(( ..cf.uaa.system_services_credentials.identity ))', 'admin_password': '(( ..cf.uaa.system_services_credentials.password ))'}, 'apply_open_security_group': '(( .properties.apply_open_security_group.value ))', 'ssl': {'skip_cert_verify': '(( ..cf.ha_proxy.skip_cert_verify.value ))'}, 'planets': '(( .properties.planets.value ))', 'app_instances': '(( .properties.app_instances.value ))', 'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}, 'org': '(( .properties.org.value ))', 'password': '(( .properties.password.value ))', 'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}, 'customer_name': '(( .properties.customer_name.value ))', 'app_domains': ['(( ..cf.cloud_controller.apps_domain.value ))'], 'city': '(( .properties.city.value ))', 'tg_test_binary_app': {'auto_services': [], 'name': 'tg_test_binary_app', 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}}, 'author': '(( .properties.author.value ))', 'country': '(( .properties.country.value ))', 'custom_dynamic_service_plan_1': '(( .properties.custom_dynamic_service_plan_1.value ))', 'space': '(( .properties.space.value ))', 'canary_watch_timeout': '(( .properties.canary_watch_timeout.value ))', 'allow_paid_service_plans': '(( .properties.allow_paid_service_plans.value ))', 'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}, 'is_feature_enabled': {'selected_option': '(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.is_feature_enabled.value ))'}, 'tg_test_broker1': {'auto_services': [], 'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'custom_dynamic_service_plan_2': '(( .properties.custom_dynamic_service_plan_2.value ))', 'example_collection': '(( .properties.example_collection.value ))', 'tg_test_broker2': {'auto_services': [], 'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'street_address': '(( .properties.street_address.value ))', 'zip_code': '(( .properties.zip_code.value ))'}, 'persistent_disk': 4096, 'memory': 512, 'default_internet_connected': False, 'type': 'redis', 'properties': {'password': 'red!s'}, 'template': 'redis'}, {'templates': [{'release': 'redis', 'name': 'sanity-tests'}], 'ephemeral_disk': 4096, 'dynamic_ip': 1, 'name': 'sanity-tests', 'post_deploy': True, 'varname': 'sanity_tests', 'is_static': False, 'cpu': 2, 'persistent_disk': 0, 'memory': 512, 'run_post_deploy_errand_default': 'when-changed', 'lifecycle': 'errand', 'manifest': {'username': '(( .properties.username.value ))', 'domain': '(( ..cf.cloud_controller.system_domain.value ))', 'tg_test_app5': {'name': 'tg_test_app5'}, 'tg_test_app2': {'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'name': 'tg_test_app2', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}}, 'tg_test_app3': {'auto_services': [{'plan': 'second-plan', 'name': 'tg-test-broker1-service', 'service_instance': 'tg-test-svc'}], 'name': 'tg_test_app3', 'app_manifest': {'memory': '256M'}}, 'example_selector': {'selected_option': '(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.example_selector.value ))'}, 'tg_test_app1': {'auto_services': [], 'name': 'tg_test_app1', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))', 'memory': '256M'}}, 'my_creds': {'password': '(( .properties.my_creds.password ))', 'identity': '(( .properties.my_creds.identity ))'}, 'auto_service_name': '(( .properties.auto_service_name.value ))', 'tg_test_app1_auto_zip': {'auto_services': [], 'name': 'tg_test_app1_auto_zip', 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'update_watch_timeout': '(( .properties.update_watch_timeout.value ))', 'cf': {'admin_user': '(( ..cf.uaa.system_services_credentials.identity ))', 'some': 'property', 'admin_password': '(( ..cf.uaa.system_services_credentials.password ))'}, 'apply_open_security_group': '(( .properties.apply_open_security_group.value ))', 'ssl': {'skip_cert_verify': '(( ..cf.ha_proxy.skip_cert_verify.value ))'}, 'planets': '(( .properties.planets.value ))', 'app_instances': '(( .properties.app_instances.value ))', 'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}, 'org': '(( .properties.org.value ))', 'password': '(( .properties.password.value ))', 'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}, 'customer_name': '(( .properties.customer_name.value ))', 'app_domains': ['(( ..cf.cloud_controller.apps_domain.value ))'], 'city': '(( .properties.city.value ))', 'tg_test_binary_app': {'auto_services': [], 'name': 'tg_test_binary_app', 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}}, 'space': '(( .properties.space.value ))', 'country': '(( .properties.country.value ))', 'custom_dynamic_service_plan_1': '(( .properties.custom_dynamic_service_plan_1.value ))', 'author': '(( .properties.author.value ))', 'canary_watch_timeout': '(( .properties.canary_watch_timeout.value ))', 'allow_paid_service_plans': '(( .properties.allow_paid_service_plans.value ))', 'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}, 'is_feature_enabled': {'selected_option': '(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.is_feature_enabled.value ))'}, 'tg_test_broker1': {'auto_services': [], 'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'custom_dynamic_service_plan_2': '(( .properties.custom_dynamic_service_plan_2.value ))', 'example_collection': '(( .properties.example_collection.value ))', 'tg_test_broker2': {'auto_services': [], 'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'street_address': '(( .properties.street_address.value ))', 'zip_code': '(( .properties.zip_code.value ))'}, 'type': 'sanity-tests', 'properties': {'cf': {'some': 'property'}}, 'template': 'sanity-tests'}], 'name': 'tg_test_app5', 'path': 'resources/redis-13.1.2.tgz', 'is_bosh_release': True, 'type': 'bosh-release', 'properties': {'tg_test_app5': {'name': 'tg_test_app5'}}}, {'path': 'https://bosh.io/d/github.com/cf-platform-eng/docker-boshrelease', 'name': 'docker-boshrelease'}, {'path': 'https://bosh.io/d/github.com/cloudfoundry-incubator/cf-routing-release', 'name': 'routing'}, {'path': 'github://cf-platform-eng/meta-buildpack/meta-buildpack.tgz', 'jobs': [{'name': 'deploy-meta-buildpack', 'post_deploy': True, 'lifecycle': 'errand', 'template': 'deploy-all', 'manifest': {'username': '(( .properties.username.value ))', 'domain': '(( ..cf.cloud_controller.system_domain.value ))', 'tg_test_app5': {'name': 'tg_test_app5'}, 'tg_test_app2': {'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'name': 'tg_test_app2', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}}, 'tg_test_app3': {'auto_services': [{'plan': 'second-plan', 'name': 'tg-test-broker1-service', 'service_instance': 'tg-test-svc'}], 'name': 'tg_test_app3', 'app_manifest': {'memory': '256M'}}, 'example_selector': {'selected_option': '(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.example_selector.value ))'}, 'tg_test_app1': {'auto_services': [], 'name': 'tg_test_app1', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))', 'memory': '256M'}}, 'my_creds': {'password': '(( .properties.my_creds.password ))', 'identity': '(( .properties.my_creds.identity ))'}, 'auto_service_name': '(( .properties.auto_service_name.value ))', 'tg_test_app1_auto_zip': {'auto_services': [], 'name': 'tg_test_app1_auto_zip', 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'update_watch_timeout': '(( .properties.update_watch_timeout.value ))', 'cf': {'admin_user': '(( ..cf.uaa.system_services_credentials.identity ))', 'admin_password': '(( ..cf.uaa.system_services_credentials.password ))'}, 'apply_open_security_group': '(( .properties.apply_open_security_group.value ))', 'ssl': {'skip_cert_verify': '(( ..cf.ha_proxy.skip_cert_verify.value ))'}, 'planets': '(( .properties.planets.value ))', 'app_instances': '(( .properties.app_instances.value ))', 'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}, 'org': '(( .properties.org.value ))', 'password': '(( .properties.password.value ))', 'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}, 'customer_name': '(( .properties.customer_name.value ))', 'app_domains': ['(( ..cf.cloud_controller.apps_domain.value ))'], 'city': '(( .properties.city.value ))', 'tg_test_binary_app': {'auto_services': [], 'name': 'tg_test_binary_app', 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}}, 'space': '(( .properties.space.value ))', 'country': '(( .properties.country.value ))', 'custom_dynamic_service_plan_1': '(( .properties.custom_dynamic_service_plan_1.value ))', 'author': '(( .properties.author.value ))', 'canary_watch_timeout': '(( .properties.canary_watch_timeout.value ))', 'allow_paid_service_plans': '(( .properties.allow_paid_service_plans.value ))', 'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}, 'is_feature_enabled': {'selected_option': '(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.is_feature_enabled.value ))'}, 'tg_test_broker1': {'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'user': '(( .deploy-meta-buildpack.app_credentials.identity ))', 'password': '(( .deploy-meta-buildpack.app_credentials.password ))', 'auto_services': []}, 'custom_dynamic_service_plan_2': '(( .properties.custom_dynamic_service_plan_2.value ))', 'security': {'password': '(( .deploy-meta-buildpack.app_credentials.password ))', 'user': '(( .deploy-meta-buildpack.app_credentials.identity ))'}, 'example_collection': '(( .properties.example_collection.value ))', 'tg_test_broker2': {'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'user': '(( .deploy-meta-buildpack.app_credentials.identity ))', 'password': '(( .deploy-meta-buildpack.app_credentials.password ))', 'auto_services': []}, 'street_address': '(( .properties.street_address.value ))', 'zip_code': '(( .properties.zip_code.value ))'}, 'type': 'deploy-all', 'properties': {}}, {'pre_delete': True, 'lifecycle': 'errand', 'template': 'delete-all', 'manifest': {'username': '(( .properties.username.value ))', 'domain': '(( ..cf.cloud_controller.system_domain.value ))', 'tg_test_app5': {'name': 'tg_test_app5'}, 'tg_test_app2': {'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'name': 'tg_test_app2', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}}, 'tg_test_app3': {'auto_services': [{'plan': 'second-plan', 'name': 'tg-test-broker1-service', 'service_instance': 'tg-test-svc'}], 'name': 'tg_test_app3', 'app_manifest': {'memory': '256M'}}, 'example_selector': {'selected_option': '(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.example_selector.value ))'}, 'tg_test_app1': {'auto_services': [], 'name': 'tg_test_app1', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))', 'memory': '256M'}}, 'my_creds': {'password': '(( .properties.my_creds.password ))', 'identity': '(( .properties.my_creds.identity ))'}, 'auto_service_name': '(( .properties.auto_service_name.value ))', 'tg_test_app1_auto_zip': {'auto_services': [], 'name': 'tg_test_app1_auto_zip', 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'update_watch_timeout': '(( .properties.update_watch_timeout.value ))', 'cf': {'admin_user': '(( ..cf.uaa.system_services_credentials.identity ))', 'admin_password': '(( ..cf.uaa.system_services_credentials.password ))'}, 'apply_open_security_group': '(( .properties.apply_open_security_group.value ))', 'ssl': {'skip_cert_verify': '(( ..cf.ha_proxy.skip_cert_verify.value ))'}, 'planets': '(( .properties.planets.value ))', 'app_instances': '(( .properties.app_instances.value ))', 'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}, 'org': '(( .properties.org.value ))', 'password': '(( .properties.password.value ))', 'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}, 'customer_name': '(( .properties.customer_name.value ))', 'app_domains': ['(( ..cf.cloud_controller.apps_domain.value ))'], 'city': '(( .properties.city.value ))', 'tg_test_binary_app': {'auto_services': [], 'name': 'tg_test_binary_app', 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}}, 'space': '(( .properties.space.value ))', 'country': '(( .properties.country.value ))', 'custom_dynamic_service_plan_1': '(( .properties.custom_dynamic_service_plan_1.value ))', 'author': '(( .properties.author.value ))', 'canary_watch_timeout': '(( .properties.canary_watch_timeout.value ))', 'allow_paid_service_plans': '(( .properties.allow_paid_service_plans.value ))', 'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}, 'is_feature_enabled': {'selected_option': '(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.is_feature_enabled.value ))'}, 'tg_test_broker1': {'auto_services': [], 'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'custom_dynamic_service_plan_2': '(( .properties.custom_dynamic_service_plan_2.value ))', 'example_collection': '(( .properties.example_collection.value ))', 'tg_test_broker2': {'auto_services': [], 'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'street_address': '(( .properties.street_address.value ))', 'zip_code': '(( .properties.zip_code.value ))'}, 'type': 'delete-all', 'properties': {}, 'name': 'delete-meta-buildpack'}], 'name': 'meta-buildpack'}], 'apply_open_security_group': False, 'update': {'update_watch_time': '10000-(( .properties.update_watch_timeout ))', 'canary_watch_time': '10000-(( .properties.canary_watch_timeout ))'}, 'post_deploy_errands': [{'name': 'deploy-all'}], 'pre_delete_errands': [{'name': 'delete-all'}], 'org': 'test-tile-org', 'packages': [{'files': [{'path': 'resources/app.zip', 'name': 'app.zip'}], 'is_cf': True, 'name': 'tg_test_app1', 'type': 'app', 'manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'memory': '256M', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))'}, 'is_app': True, 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'memory': '256M', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))'}, 'requires_cf_cli': True, 'properties': {'tg_test_app1': {'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'memory': '256M', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))'}, 'name': 'tg_test_app1', 'auto_services': []}}}, {'files': [{'path': 'src/app', 'name': 'app'}], 'is_cf': True, 'name': 'tg_test_app1_auto_zip', 'type': 'app', 'manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'is_app': True, 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'requires_cf_cli': True, 'properties': {'tg_test_app1_auto_zip': {'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'name': 'tg_test_app1_auto_zip', 'auto_services': []}}}, {'files': [{'path': 'src/binary-app/binary-app.py', 'name': 'binary-app.py'}], 'is_cf': True, 'name': 'tg_test_binary_app', 'type': 'app', 'manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}, 'is_app': True, 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}, 'requires_cf_cli': True, 'properties': {'tg_test_binary_app': {'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}, 'name': 'tg_test_binary_app', 'auto_services': []}}}, {'files': [{'path': 'resources/app.zip', 'name': 'app.zip'}], 'is_cf': True, 'name': 'tg_test_broker1', 'enable_global_access_to_plans': True, 'type': 'app-broker', 'is_broker_app': True, 'manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'is_app': True, 'is_broker': True, 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'requires_cf_cli': True, 'properties': {'tg_test_broker1': {'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'auto_services': []}}}, {'files': [{'path': 'resources/app.zip', 'name': 'app.zip'}], 'is_cf': True, 'needs_cf_credentials': True, 'health_check': 'none', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}, 'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'properties': {'tg_test_app2': {'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}, 'name': 'tg_test_app2', 'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}]}}, 'name': 'tg_test_app2', 'type': 'app', 'manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}, 'is_app': True, 'requires_cf_cli': True, 'consumes': {'nats': {'from': 'nats', 'deployment': '(( ..cf.deployment_name ))'}, 'redis': {'from': 'redis'}}}, {'files': [{'path': 'resources/app.zip', 'name': 'app.zip'}], 'is_cf': True, 'properties': {'tg_test_broker2': {'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'auto_services': []}}, 'internal_service_names': ['service1', 'service2'], 'name': 'tg_test_broker2', 'requires_cf_cli': True, 'is_broker_app': True, 'manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'is_app': True, 'is_broker': True, 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}, 'type': 'app-broker', 'consumes': {'nats': {'from': 'nats', 'deployment': '(( ..cf.deployment_name ))'}, 'redis': {'from': 'redis'}}}, {'files': [{'path': 'resources/buildpack.zip', 'name': 'buildpack.zip'}], 'is_cf': True, 'name': 'tg_test_buildpack', 'requires_cf_cli': True, 'is_buildpack': True, 'path': 'buildpack.zip', 'buildpack_order': 99, 'type': 'buildpack', 'properties': {'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}}}, {'files': [{'path': 'resources/decorator.zip', 'name': 'decorator.zip'}], 'is_cf': True, 'name': 'tg_test_decorator', 'type': 'decorator', 'is_decorator': True, 'is_buildpack': True, 'requires_meta_buildpack': True, 'path': 'decorator.zip', 'requires_cf_cli': True, 'properties': {'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}}}, {'files': [], 'is_cf': True, 'name': 'tg_test_app3', 'requires_cf_cli': True, 'image': 'guidowb/sample-cf-app', 'is_docker_app': True, 'manifest': {'memory': '256M'}, 'is_app': True, 'auto_services': [{'plan': 'second-plan', 'service_instance': 'tg-test-svc', 'name': 'tg-test-broker1-service'}], 'is_docker': True, 'app_manifest': {'memory': '256M'}, 'type': 'docker-app', 'properties': {'tg_test_app3': {'app_manifest': {'memory': '256M'}, 'name': 'tg_test_app3', 'auto_services': [{'plan': 'second-plan', 'service_instance': 'tg-test-svc', 'name': 'tg-test-broker1-service'}]}}}, {'files': [{'path': 'docker:guidowb/sample-cf-app', 'name': 'guidowb-sample-cf-app.tgz'}], 'ephemeral_disk': 4096, 'properties': {'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}}, 'name': 'tg_test_app4', 'docker_images': ['guidowb/sample-cf-app'], 'is_docker_bosh': True, 'manifest': {'containers': [{'bind_ports': ['80:80', '443:443', '8080:8080', '8443:8443'], 'image': 'guidowb/sample-cf-app', 'env_file': ['/var/vcap/jobs/docker-bosh-tg_test_app4/bin/opsmgr.env'], 'name': 'app'}]}, 'instances': 1, 'is_docker': True, 'persistent_disk': 2048, 'memory': 512, 'routes': [{'prefix': 'my-route', 'port': 8080}], 'type': 'docker-bosh', 'cpu': 2, 'requires_docker_bosh': True}, {'jobs': [{'templates': [{'release': 'redis', 'name': 'redis'}], 'ephemeral_disk': 4096, 'dynamic_ip': 1, 'name': 'redis', 'is_static': False, 'varname': 'redis', 'cpu': 2, 'static_ip': 0, 'instances': 2, 'max_in_flight': 1, 'manifest': {'username': '(( .properties.username.value ))', 'domain': '(( ..cf.cloud_controller.system_domain.value ))', 'tg_test_app5': {'name': 'tg_test_app5'}, 'tg_test_app2': {'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'name': 'tg_test_app2', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}}, 'tg_test_app3': {'auto_services': [{'plan': 'second-plan', 'name': 'tg-test-broker1-service', 'service_instance': 'tg-test-svc'}], 'name': 'tg_test_app3', 'app_manifest': {'memory': '256M'}}, 'example_selector': {'selected_option': '(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.example_selector.value ))'}, 'tg_test_app1': {'auto_services': [], 'name': 'tg_test_app1', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))', 'memory': '256M'}}, 'my_creds': {'password': '(( .properties.my_creds.password ))', 'identity': '(( .properties.my_creds.identity ))'}, 'auto_service_name': '(( .properties.auto_service_name.value ))', 'tg_test_app1_auto_zip': {'auto_services': [], 'name': 'tg_test_app1_auto_zip', 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'update_watch_timeout': '(( .properties.update_watch_timeout.value ))', 'cf': {'admin_user': '(( ..cf.uaa.system_services_credentials.identity ))', 'admin_password': '(( ..cf.uaa.system_services_credentials.password ))'}, 'apply_open_security_group': '(( .properties.apply_open_security_group.value ))', 'ssl': {'skip_cert_verify': '(( ..cf.ha_proxy.skip_cert_verify.value ))'}, 'planets': '(( .properties.planets.value ))', 'app_instances': '(( .properties.app_instances.value ))', 'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}, 'org': '(( .properties.org.value ))', 'password': '(( .properties.password.value ))', 'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}, 'customer_name': '(( .properties.customer_name.value ))', 'app_domains': ['(( ..cf.cloud_controller.apps_domain.value ))'], 'city': '(( .properties.city.value ))', 'tg_test_binary_app': {'auto_services': [], 'name': 'tg_test_binary_app', 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}}, 'author': '(( .properties.author.value ))', 'country': '(( .properties.country.value ))', 'custom_dynamic_service_plan_1': '(( .properties.custom_dynamic_service_plan_1.value ))', 'space': '(( .properties.space.value ))', 'canary_watch_timeout': '(( .properties.canary_watch_timeout.value ))', 'allow_paid_service_plans': '(( .properties.allow_paid_service_plans.value ))', 'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}, 'is_feature_enabled': {'selected_option': '(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.is_feature_enabled.value ))'}, 'tg_test_broker1': {'auto_services': [], 'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'custom_dynamic_service_plan_2': '(( .properties.custom_dynamic_service_plan_2.value ))', 'example_collection': '(( .properties.example_collection.value ))', 'tg_test_broker2': {'auto_services': [], 'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'street_address': '(( .properties.street_address.value ))', 'zip_code': '(( .properties.zip_code.value ))'}, 'persistent_disk': 4096, 'memory': 512, 'default_internet_connected': False, 'type': 'redis', 'properties': {'password': 'red!s'}, 'template': 'redis'}, {'templates': [{'release': 'redis', 'name': 'sanity-tests'}], 'ephemeral_disk': 4096, 'dynamic_ip': 1, 'name': 'sanity-tests', 'post_deploy': True, 'varname': 'sanity_tests', 'is_static': False, 'cpu': 2, 'persistent_disk': 0, 'memory': 512, 'run_post_deploy_errand_default': 'when-changed', 'lifecycle': 'errand', 'manifest': {'username': '(( .properties.username.value ))', 'domain': '(( ..cf.cloud_controller.system_domain.value ))', 'tg_test_app5': {'name': 'tg_test_app5'}, 'tg_test_app2': {'auto_services': [{'name': 'tg-test-broker1-service', 'plan': 'first-plan'}, {'name': '(( .properties.auto_service_name.value ))'}], 'name': 'tg_test_app2', 'app_manifest': {'path': 'app.zip', 'host': 'tg-test-app2-hostname', 'command': 'python app.py', 'buildpack': 'python_buildpack', 'memory': '256M'}}, 'tg_test_app3': {'auto_services': [{'plan': 'second-plan', 'name': 'tg-test-broker1-service', 'service_instance': 'tg-test-svc'}], 'name': 'tg_test_app3', 'app_manifest': {'memory': '256M'}}, 'example_selector': {'selected_option': '(( .properties.example_selector.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.example_selector.value ))'}, 'tg_test_app1': {'auto_services': [], 'name': 'tg_test_app1', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'instances': '(( .properties.app_instances.value ))', 'memory': '256M'}}, 'my_creds': {'password': '(( .properties.my_creds.password ))', 'identity': '(( .properties.my_creds.identity ))'}, 'auto_service_name': '(( .properties.auto_service_name.value ))', 'tg_test_app1_auto_zip': {'auto_services': [], 'name': 'tg_test_app1_auto_zip', 'app_manifest': {'path': 'app', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'update_watch_timeout': '(( .properties.update_watch_timeout.value ))', 'cf': {'admin_user': '(( ..cf.uaa.system_services_credentials.identity ))', 'some': 'property', 'admin_password': '(( ..cf.uaa.system_services_credentials.password ))'}, 'apply_open_security_group': '(( .properties.apply_open_security_group.value ))', 'ssl': {'skip_cert_verify': '(( ..cf.ha_proxy.skip_cert_verify.value ))'}, 'planets': '(( .properties.planets.value ))', 'app_instances': '(( .properties.app_instances.value ))', 'tg_test_app4': {'host': '(( .docker-bosh-tg_test_app4.first_ip ))', 'hosts': '(( .docker-bosh-tg_test_app4.ips ))', 'name': 'tg_test_app4'}, 'org': '(( .properties.org.value ))', 'password': '(( .properties.password.value ))', 'tg_test_buildpack': {'buildpack_order': '(( .properties.tg_test_buildpack_buildpack_order.value ))', 'name': 'tg_test_buildpack'}, 'customer_name': '(( .properties.customer_name.value ))', 'app_domains': ['(( ..cf.cloud_controller.apps_domain.value ))'], 'city': '(( .properties.city.value ))', 'tg_test_binary_app': {'auto_services': [], 'name': 'tg_test_binary_app', 'app_manifest': {'path': 'binary-app.py', 'buildpack': 'binary_buildpack', 'command': './binary-app.py', 'memory': '256M'}}, 'space': '(( .properties.space.value ))', 'country': '(( .properties.country.value ))', 'custom_dynamic_service_plan_1': '(( .properties.custom_dynamic_service_plan_1.value ))', 'author': '(( .properties.author.value ))', 'canary_watch_timeout': '(( .properties.canary_watch_timeout.value ))', 'allow_paid_service_plans': '(( .properties.allow_paid_service_plans.value ))', 'tg_test_decorator': {'buildpack_order': '(( .properties.tg_test_decorator_buildpack_order.value ))', 'name': 'tg_test_decorator'}, 'is_feature_enabled': {'selected_option': '(( .properties.is_feature_enabled.selected_option.parsed_manifest(manifest_snippet) ))', 'value': '(( .properties.is_feature_enabled.value ))'}, 'tg_test_broker1': {'auto_services': [], 'name': 'tg_test_broker1', 'enable_global_access_to_plans': '(( .properties.tg_test_broker1_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'custom_dynamic_service_plan_2': '(( .properties.custom_dynamic_service_plan_2.value ))', 'example_collection': '(( .properties.example_collection.value ))', 'tg_test_broker2': {'auto_services': [], 'name': 'tg_test_broker2', 'enable_global_access_to_plans': '(( .properties.tg_test_broker2_enable_global_access_to_plans.value ))', 'app_manifest': {'path': 'app.zip', 'buildpack': 'python_buildpack', 'command': 'python app.py', 'memory': '256M'}}, 'street_address': '(( .properties.street_address.value ))', 'zip_code': '(( .properties.zip_code.value ))'}, 'type': 'sanity-tests', 'properties': {'cf': {'some': 'property'}}, 'template': 'sanity-tests'}], 'name': 'tg_test_app5', 'path': 'resources/redis-13.1.2.tgz', 'is_bosh_release': True, 'type': 'bosh-release', 'properties': {'tg_test_app5': {'name': 'tg_test_app5'}}}], 'properties': [{'name': 'author', 'default': 'Tile Ninja', 'optional': False, 'configurable': False, 'label': 'Author', 'type': 'string'}, {'type': 'string', 'configurable': True, 'optional': True, 'name': 'customer_name', 'label': 'Full Name'}, {'description': 'Address to use for junk mail', 'optional': False, 'configurable': True, 'label': 'Street Address', 'type': 'string', 'name': 'street_address'}, {'optional': False, 'configurable': True, 'type': 'string', 'name': 'city', 'label': 'City'}, {'name': 'zip_code', 'default': '90310', 'type': 'string', 'configurable': True, 'label': 'ZIP+4', 'optional': False}, {'name': 'country', 'type': 'dropdown_select', 'configurable': True, 'label': 'Country', 'optional': False, 'options': [{'default': True, 'name': 'country_us', 'label': 'US'}, {'name': 'country_elsewhere', 'label': 'Elsewhere'}]}, {'name': 'example_collection', 'default': [{'album': 'Christmas Carols', 'explicit': True, 'artist': 'Ops Manatee'}], 'optional': False, 'property_blueprints': [{'type': 'string', 'name': 'album', 'label': 'Album'}, {'type': 'string', 'name': 'artist', 'label': 'Artist'}, {'type': 'boolean', 'name': 'explicit', 'label': 'Explicit'}], 'label': 'Albums', 'type': 'collection', 'configurable': True}, {'name': 'example_selector', 'option_templates': [{'select_value': 'Pizza', 'name': 'pizza_option', 'property_blueprints': [{'label': 'Pepperoni', 'type': 'boolean', 'name': 'pepperoni', 'configurable': True}, {'label': 'Pineapple', 'type': 'boolean', 'name': 'pineapple', 'configurable': True}, {'type': 'string', 'label': 'Other Toppings', 'optional': True, 'name': 'other_toppings', 'configurable': True}]}, {'select_value': 'Filet Mignon', 'name': 'filet_mignon_option', 'property_blueprints': [{'label': 'Complex type inside selector', 'type': 'simple_credentials', 'name': 'steak_creds', 'configurable': True}, {'name': 'rarity_dropdown', 'default': 'rare', 'label': 'How rare?', 'type': 'dropdown_select', 'options': [{'name': 'rare', 'label': 'Rare'}, {'name': 'medium', 'label': 'Medium'}, {'name': 'well-done', 'label': 'Well done'}], 'configurable': True}]}], 'default': 'Pizza', 'optional': False, 'label': 'Food Choices', 'type': 'selector', 'configurable': True}, {'description': 'Example of simple credentials type', 'type': 'simple_credentials', 'configurable': True, 'label': 'Simple Credentials', 'optional': False, 'name': 'my_creds'}, {'name': 'username', 'type': 'string', 'configurable': True, 'label': 'Username', 'optional': False, 'constraints': [{'must_match_regex': '^[^!@#$%^&*()]*$', 'error_message': 'This name cannot contain capital digits.'}]}, {'optional': False, 'configurable': True, 'type': 'secret', 'name': 'password', 'label': 'Password'}, {'description': 'Maximum amount of time to allow canaries to take before going healthy', 'type': 'integer', 'configurable': True, 'label': 'Canary Watch Timeout', 'optional': False, 'name': 'canary_watch_timeout'}, {'description': 'Maximum amount of time to allow non-canaries to take before going healthy', 'type': 'integer', 'configurable': True, 'label': 'Update Watch Timeout', 'optional': False, 'name': 'update_watch_timeout'}, {'description': 'Choose whether or not to enable this feature.', 'default': 'feature_disabled', 'type': 'selector', 'configurable': True, 'option_templates': [{'select_value': 'feature_enabled', 'label': 'Enable feature', 'property_blueprints': [{'label': 'Configure this feature', 'type': 'string', 'name': 'feature_config', 'configurable': True}], 'name': 'feature_enabled', 'description': 'Enable this feature (requires more config).'}, {'select_value': 'feature_disabled', 'label': 'Disable feature', 'description': 'Disable this feature (no more config).', 'name': 'feature_disabled'}], 'label': 'Enable this feature?', 'optional': False, 'name': 'is_feature_enabled'}, {'name': 'planets', 'optional': True, 'label': 'Planets', 'type': 'multi_select_options', 'options': [{'name': 'mercury', 'label': 'mercury'}, {'name': 'Venus', 'label': 'venus'}, {'name': 'Earth', 'label': 'earth'}, {'name': 'Mars', 'label': 'mars'}, {'name': 'Jupiter', 'label': 'jupiter'}, {'name': 'Saturn', 'label': 'saturn'}, {'name': 'Uranus', 'label': 'uranus'}, {'name': 'Neptune', 'label': 'neptune'}], 'configurable': True}, {'name': 'app_instances', 'default': 2, 'type': 'integer', 'configurable': True, 'label': 'Dynamic app instance count', 'optional': False}, {'name': 'auto_service_name', 'default': 'tg-test-broker1-service', 'type': 'string', 'configurable': True, 'label': 'Auto services service name', 'optional': False}], 'stemcell_criteria': {'version': u'3445', 'os': 'ubuntu-trusty'}, 'sha1': False, 'name': 'test-tile', 'allow_paid_service_plans': True, 'purge_service_brokers': True, 'requires_docker_bosh': True, 'history': {'version': '0.0.1'}}