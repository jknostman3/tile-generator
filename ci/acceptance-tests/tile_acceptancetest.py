# tile-generator
#
# Copyright (c) 2015-Present Pivotal Software, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import unittest
import sys
import os
import glob
import yaml

class VerifyTile(unittest.TestCase):

	def test_has_valid_migrations(self):
		self.assertTrue(os.path.exists('product/migrations/v1'))
		files = glob.glob('product/migrations/v1/*.js')
		self.assertEqual(len(files), 1)

	def test_has_valid_metadata(self):
		self.assertTrue(os.path.exists('product/metadata'))
		files = glob.glob('product/metadata/*.yml')
		self.assertEqual(len(files), 1)
		read_yaml(files[0]) # Ensure corrent yaml syntax

	def test_contains_tile_yml(self):
		self.assertTrue(os.path.exists('product/tile-generator'))
		files = glob.glob('product/tile-generator/tile.yml')
		self.assertEqual(len(files), 1)
		read_yaml(files[0])

class VerifyMetadata(unittest.TestCase):

	def setUp(self):
		self.assertTrue(os.path.exists('product/metadata'))
		files = glob.glob('product/metadata/*.yml')
		self.assertEqual(len(files), 1)
		self.metadata = read_yaml(files[0])

	def test_has_expected_name(self):
		self.assertEqual(self.metadata['name'], 'test-tile')

	def test_has_expected_label(self):
		self.assertEqual(self.metadata['label'], 'Generated Test Tile')

	def test_has_expected_description(self):
		self.assertEqual(self.metadata['description'], 'A sample tile generated by tile-generator')

	def test_product_version_is_string(self):
		self.assertIsInstance(self.metadata['product_version'], str)

	def test_metadata_version_is_string(self):
		self.assertIsInstance(self.metadata['metadata_version'], str)

	def test_has_expected_minimum_version_for_upgrade(self):
		self.assertEqual(self.metadata['minimum_version_for_upgrade'], '0.0.1')

	def test_has_rank(self):
		self.assertEqual(self.metadata['rank'], 1)

	def test_has_expected_serial(self):
		self.assertTrue(self.metadata['serial'])

	def test_has_service_broker_flag(self):
		self.assertFalse(self.metadata['service_broker'])


class VerifyProperties(unittest.TestCase):

	def setUp(self):
		self.assertTrue(os.path.exists('product/metadata'))
		files = glob.glob('product/metadata/*.yml')
		self.assertEqual(len(files), 1)
		self.metadata = read_yaml(files[0])

	def test_optional(self):
		blueprints = self.metadata['property_blueprints']
		self.assertFalse(find_by_name(blueprints, 'author')['optional'])
		self.assertTrue(find_by_name(blueprints, 'customer_name')['optional'])
		self.assertFalse(find_by_name(blueprints, 'street_address')['optional'])

	def test_bosh_release_has_properties(self):
		job = find_by_name(self.metadata['job_types'], 'redis')
		self.assertIn('author', job['manifest'])

	def test_default_internet_connected(self):
		job = find_by_name(self.metadata['job_types'], 'redis')
		self.assertIn('default_internet_connected', job)
		self.assertFalse(job['default_internet_connected'])

	def test_run_errand_default(self):
		job = find_by_name(self.metadata['job_types'], 'sanity-tests')
		self.assertEqual(job['run_post_deploy_errand_default'], 'when-changed')

	def test_bosh_release_properties_merged(self):
		job = find_by_name(self.metadata['job_types'], 'sanity-tests')
		manifest = yaml.safe_load(job['manifest'])
		cf = manifest['cf']
		self.assertIn('some', cf) # Property defined in tile.yml.
		self.assertIn('admin_user', cf) # Auto-included property.

	def test_deploy_all_has_broker_user_and_password(self):
		job = find_by_name(self.metadata['job_types'], 'deploy-all')
		manifest = yaml.safe_load(job['manifest'])
		broker = manifest['tg_test_broker1']
		self.assertIn('user', broker)
		self.assertIn('password', broker)

	def test_cross_deployment_link_in_metadata(self):
		deploy_all_job = find_by_name(self.metadata['job_types'], 'deploy-all')
		deploy_all_template = find_by_name(deploy_all_job['templates'], 'deploy-all')
		self.assertIn('consumes', deploy_all_template)
		consumes = yaml.safe_load(deploy_all_template['consumes'])
		self.assertIn('nats', consumes)
		self.assertIn('from', consumes['nats'])
		self.assertEqual(consumes['nats'].get('deployment'), '(( ..cf.deployment_name ))')
		self.assertEqual(consumes['nats'].get('from'), 'nats')

class VerifyConstraints(unittest.TestCase):

	def setUp(self):
		self.assertTrue(os.path.exists('product/metadata'))
		files = glob.glob('product/metadata/*.yml')
		self.assertEqual(len(files), 1)
		self.metadata = read_yaml(files[0])

	def test_resource_constraints(self):
		job = find_by_name(self.metadata['job_types'], 'sanity-tests')
		resource_defs = job['resource_definitions']
		self.assertEqual(find_by_name(resource_defs, 'cpu')['constraints']['min'], 2)
		self.assertEqual(find_by_name(resource_defs, 'ephemeral_disk')['constraints']['min'], 4096)
		self.assertEqual(find_by_name(resource_defs, 'persistent_disk')['constraints']['min'], 0)
		self.assertEqual(find_by_name(resource_defs, 'ram')['constraints']['min'], 512)

class VerifyForms(unittest.TestCase):

	def setUp(self):
		self.assertTrue(os.path.exists('product/metadata'))
		files = glob.glob('product/metadata/*.yml')
		self.assertEqual(len(files), 1)
		self.metadata = read_yaml(files[0])

	def test_collection_form_does_not_contain_uuid_property(self):
		form = find_by_name(self.metadata['form_types'], 'albums_form')
		collection_ref = form['property_inputs'][0]
		for property_ref in collection_ref['property_inputs']:
			self.assertNotEqual(property_ref['reference'], 'id')

class VerifyJobs(unittest.TestCase):

	def test_cross_deployment_link_in_deploy_all_job(self):
		deploy_all_sh_file = 'release/jobs/deploy-all/templates/deploy-all.sh.erb'
		self.assertTrue(os.path.exists(deploy_all_sh_file))
		deploy_all_sh = read_file(deploy_all_sh_file)
		self.assertIn('NATS_HOST=', deploy_all_sh)
		self.assertIn('NATS_HOSTS=', deploy_all_sh)
		self.assertIn('cf set-env $1 NATS_HOST ', deploy_all_sh)
		self.assertIn('cf set-env $1 NATS_HOSTS ', deploy_all_sh)

	def test_in_deployment_link_in_deploy_all_job(self):
		deploy_all_sh_file = 'release/jobs/deploy-all/templates/deploy-all.sh.erb'
		self.assertTrue(os.path.exists(deploy_all_sh_file))
		deploy_all_sh = read_file(deploy_all_sh_file)
		self.assertIn('REDIS_HOST=', deploy_all_sh)
		self.assertIn('REDIS_HOSTS=', deploy_all_sh)
		self.assertIn('cf set-env $1 REDIS_HOST ', deploy_all_sh)
		self.assertIn('cf set-env $1 REDIS_HOSTS ', deploy_all_sh)

	def test_link_properties_in_deploy_all_job(self):
		deploy_all_sh_file = 'release/jobs/deploy-all/templates/deploy-all.sh.erb'
		self.assertTrue(os.path.exists(deploy_all_sh_file))
		deploy_all_sh = read_file(deploy_all_sh_file)
		self.assertIn('NATS_PROPERTIES=', deploy_all_sh)
		self.assertIn('REDIS_PROPERTIES=', deploy_all_sh)
		self.assertIn('cf set-env $1 NATS_PROPERTIES ', deploy_all_sh)
		self.assertIn('cf set-env $1 REDIS_PROPERTIES ', deploy_all_sh)

	def test_consumes_links_in_deploy_all_spec(self):
		deploy_all_spec_file = 'release/jobs/deploy-all/job.MF'
		self.assertTrue(os.path.exists(deploy_all_spec_file))
		spec = read_yaml(deploy_all_spec_file)
		self.assertIn('consumes', spec)
		self.assertIsNotNone(find_by_name(spec['consumes'], 'redis'))
		self.assertIsNotNone(find_by_name(spec['consumes'], 'nats'))

	def test_docker_bosh_hosts_in_deploy_all_job(self):
		deploy_all_sh_file = 'release/jobs/deploy-all/templates/deploy-all.sh.erb'
		self.assertTrue(os.path.exists(deploy_all_sh_file))
		deploy_all_sh = read_file(deploy_all_sh_file)
		self.assertIn('TG_TEST_APP4_HOST=', deploy_all_sh)
		self.assertIn('TG_TEST_APP4_HOSTS=', deploy_all_sh)
		self.assertIn('cf set-env $1 TG_TEST_APP4_HOST ', deploy_all_sh)
		self.assertIn('cf set-env $1 TG_TEST_APP4_HOSTS ', deploy_all_sh)

class VerifyRuntimeConfig(unittest.TestCase):

	def setUp(self):
		self.assertTrue(os.path.exists('product/metadata'))
		files = glob.glob('product/metadata/*.yml')
		self.assertEqual(len(files), 1)
		self.metadata = read_yaml(files[0])

	def test_runtime_config_is_present(self):
		expected = yaml.load(
'''
- name: example-runtime-config
  runtime_config: |
      addons:
      - jobs:
        - name: login-banner
          release: os-conf
        name: login
        properties:
          login_banner:
            text: (( .properties.banner_text.value ))
      releases:
      - name: os-conf
        version: 15
'''
		)
		self.assertEquals(self.metadata.get('runtime_configs'), expected)


def find_by_name(lst, name):
	return next(x for x in lst if x.get('name', None) == name)

def read_yaml(filename):
	with open(filename, 'rb') as file:
		return yaml.safe_load(file)

def read_file(filename):
	with open(filename, 'rb') as file:
		return file.read()

if __name__ == '__main__':
	unittest.main()
